
static Key ch[KEYS] = {

        { 0 }, /* New row */

        { XK_Shift_L, Button2, ,  }, 
        { XK_Alt_L, Button3, ,  }, 

        { 0 }, /* New row */

        { Buttonmod buttonmods[] = {, , ,  }, 
        { { XK_Shift_L, Button2 },, , ,  }, 
        { { XK_Alt_L, Button3 },, , ,  }, 
        { }, , ,  }, 

        { 0 }, /* New row */

        { #!/bin/sh, , ,  }, 
        { , , ,  }, 
        { echo "generating sub definitions", , ,  }, 
        { for layer in $(./printkeys.sh), , ,  }, 
        { do, , ,  }, 
        { echo "curr: $layer", , ,  }, 
        { ./constructkeydef.sh "$layer", , ,  }, 
        { done, , ,  }, 
        { , , ,  }, 
        { echo "generating overlay definition", , ,  }, 
        { ./constructoverlay.sh, , ,  }, 
        { , , ,  }, 
        { echo "generating layer & button def", , ,  }, 
        { ./constructonetimedefs.sh, , ,  }, 

        { 0 }, /* New row */

        { #!/bin/sh, , ,  }, 
        { folder="$1" #"keys_en", , ,  }, 
        { [ "$folder" = "" ] && echo "No Layout Name passed" && exit 0, , ,  }, 
        { cd "$folder", , ,  }, 
        { , , ,  }, 
        { outputfile="../${folder}.def", , ,  }, 
        { outputdef=$(echo $folder | tr '[:lower:]' '[:upper:]'), , ,  }, 
        { totallines=$(../gettotaldeflen.sh) #//+amount of files, , ,  }, 
        { totallines=$(expr "$totallines" + "$(ls| wc -l)"), , ,  }, 
        { #touch $outputfile, , ,  }, 
        { #echo "$totallines", , ,  }, 
        { #return 0, , ,  }, 
        { #echo "#define $outputdef $totallines" > $outputfile, , ,  }, 
        { #echo "static Key $folder[$outputdef] = {" >> $outputfile, , ,  }, 
        { #not necessary this way, , ,  }, 
        { #echo "static Key $folder[$totallines] = {" > $outputfile, , ,  }, 
        { , , ,  }, 
        { #acctually prob necessary -> all arays need to be the same lenght, , ,  }, 
        { #e.v. eval the longest when packing everything toggether, , ,  }, 
        { #also the definitions might always have to have a 2nd row ender on the last element, , ,  }, 
        { #echo "#define KEYS $totallines" > $outputfile, , ,  }, 
        { , , ,  }, 
        { latestlongest="0", , ,  }, 
        { test -e ../key_defs.len && latestlongest=$(cat ../key_defs.len), , ,  }, 
        { [ "$totallines" -gt "$latestlongest" ] && echo "$totallines" > ../key_defs.len, , ,  }, 
        { #echo "$totallines", , ,  }, 
        { , , ,  }, 
        { echo "" > $outputfile, , ,  }, 
        { echo "static Key $folder[KEYS] = {" >> $outputfile, , ,  }, 
        { , , ,  }, 
        { b_first="", , ,  }, 
        { for filename in $(ls), , ,  }, 
        { do, , ,  }, 
        { #if [ "$b_first" != "" ], then, ,  }, 
        { #        echo "" >>  $outputfile, , ,  }, 
        { #	echo "        { 0 }, /* New row */" >> $outputfile #maybe not on last, , ,  }, 
        { #        echo "" >>  $outputfile, , ,  }, 
        { #fi, , ,  }, 
        { [ "$b_first" = "" ]&& { echo "",  echo  "        { 0 }, /* New row */",  echo "",  } >> $outputfile }, 
        { , , ,  }, 
        { while read -r line, , ,  }, 
        { do, , ,  }, 
        { #title=$(echo "${line}" | awk '{print $1}' FS=", "), ,  }, 
        { #otherchars=$(echo "${line}" | awk '{print $2}' FS=", "), ,  }, 
        { #key=$(echo "${line}" | awk '{print $3}' FS=", "), ,  }, 
        { #sizeing=$(echo "${line}" | awk '{print $4}' FS=", "), ,  }, 
        { , , ,  }, 
        { title=$(printf "%s" "${line}" | awk '{print $1}' FS=", "), ,  }, 
        { otherchars=$(printf "%s" "${line}" | awk '{print $2}' FS=", "), ,  }, 
        { key=$(printf "%s" "${line}" | awk '{print $3}' FS=", "), ,  }, 
        { sizeing=$(printf "%s" "${line}" | awk '{print $4}' FS=", "), ,  }, 
        { , , ,  }, 
        { #echo "        { ${title}, ${otherchars}, ${key}, ${sizeing} }, " >>  $outputfile, , ,  }, 
        { printf "%s\n" "        { ${title}, ${otherchars}, ${key}, ${sizeing} }, " >>  $outputfile, , ,  }, 
        { #                printf "%s\n" "        { ${title}, ${otherchars}, ${key}, ${sizeing} }, ", , ,  }, 
        { #exit 0, , ,  }, 
        { done < "$filename", , ,  }, 
        { done, , ,  }, 
        { echo "}, " >>  $outputfile, ,  }, 
        { , , ,  }, 

        { 0 }, /* New row */

        { #!/bin/sh, , ,  }, 
        { , , ,  }, 
        { outputfileButtons="_buttonmods.def", , ,  }, 
        { outputfileLayers="_layers.def", , ,  }, 
        { outputfileLayersTmpName="_layers.def.name", , ,  }, 
        { outputfileLayersTmpKeys="_layers.def.keys", , ,  }, 
        { totallinesLayers=$(wc -l _naming | awk '{print $1}'), , ,  }, 
        { #totallinesLayers=$(wc -l _buttonmods | awk '{print $1}'), , ,  }, 
        { , , ,  }, 
        { , , ,  }, 
        { echo "#define LAYERS 6" > $outputfileLayersTmpName, , ,  }, 
        { echo "static char* layer_names[LAYERS] = {" >> $outputfileLayersTmpName, , ,  }, 
        { echo "static Key* available_layers[LAYERS] = {" > $outputfileLayersTmpKeys, , ,  }, 
        { , , ,  }, 
        { for defline in $(cat _naming), , ,  }, 
        { do, , ,  }, 
        { valuename=$(printf "%s\n" "${defline}" | awk '{print $1}' FS=', '), ,  }, 
        { valuekeys=$(printf "%s\n" "${defline}" | awk '{print $2}' FS=', '), ,  }, 
        { printf "%s\n" "       \"${valuename}\"," >> $outputfileLayersTmpName, , ,  }, 
        { printf "%s\n" "        ${valuekeys}," >> $outputfileLayersTmpKeys, , ,  }, 
        { done, , ,  }, 
        { , , ,  }, 
        { echo "}, " >> $outputfileLayersTmpName, ,  }, 
        { echo "}, " >> $outputfileLayersTmpKeys, ,  }, 
        { echo "" >> $outputfileLayersTmpName, , ,  }, 
        { echo "" >> $outputfileLayersTmpKeys, , ,  }, 
        { , , ,  }, 
        { cat $outputfileLayersTmpName $outputfileLayersTmpKeys > $outputfileLayers, , ,  }, 
        { rm "$outputfileLayersTmpName", , ,  }, 
        { rm "$outputfileLayersTmpKeys", , ,  }, 
        { , , ,  }, 
        { echo "Buttonmod buttonmods[] = {" > $outputfileButtons, , ,  }, 
        { for defline in $(cat _buttonmods), , ,  }, 
        { do, , ,  }, 
        { key=$(printf "%s\n" "${defline}"| awk '{print $1}' FS=', '), ,  }, 
        { value=$(printf "%s\n" "${defline}" | awk '{print $2}' FS=', '), ,  }, 
        { printf "%s\n" "        { $key, $value }," >> $outputfileButtons, , ,  }, 
        { done, , ,  }, 
        { , , ,  }, 
        { echo "}, " >> $outputfileButtons, ,  }, 

        { 0 }, /* New row */

        { #!/bin/sh, , ,  }, 
        { cd _overlay, , ,  }, 
        { , , ,  }, 
        { outputfile="../_overlay.def", , ,  }, 
        { totallines=$(../gettotaldeflen.sh), , ,  }, 
        { filecnt=$(ls | wc -l), , ,  }, 
        { filecnt="$(expr ${filecnt} \* '2')", , ,  }, 
        { totallines=$(expr "$totallines" + "$filecnt"), , ,  }, 
        { echo "$totallines", , ,  }, 
        { , , ,  }, 
        { echo "" >  $outputfile, , ,  }, 
        { echo "#define OVERLAYS $totallines" >> $outputfile, , ,  }, 
        { echo "static Key overlay[OVERLAYS] = {" >>  $outputfile, , ,  }, 
        { , , ,  }, 
        { for filename in $(ls), , ,  }, 
        { do, , ,  }, 
        { #echo "test: $filename", , ,  }, 
        { echo "        { 0, 0, $filename }, /* New Definition */" >>  $outputfile, , ,  }, 
        { #read.., , ,  }, 
        { while read -r line, , ,  }, 
        { do, , ,  }, 
        { title=$(printf "%s" "${line}" | awk '{print $1}' FS=", "), ,  }, 
        { key=$(printf "%s" "${line}" | awk '{print $2}' FS=", "), ,  }, 
        { printf "%s\n" "        { $title, 0, $key }, " >>  $outputfile, , ,  }, 
        { done < "$filename", , ,  }, 
        { echo "        { 0, 0, XK_Cancel },  /* XK_Cancel signifies  overlay boundary */" >>  $outputfile, , ,  }, 
        { done, , ,  }, 
        { echo "}, " >>  $outputfile, ,  }, 
        { echo "" >>  $outputfile, , ,  }, 
        { #echo "$totallines", , ,  }, 
        { , , ,  }, 

        { 0 }, /* New row */

        { #!/bin/sh, , ,  }, 
        { wc -l $(ls) | tail -n 1 - | awk '{print $1}', , ,  }, 

        { 0 }, /* New row */

        { 64, , ,  }, 

        { 0 }, /* New row */


        { 0 }, /* New row */

        { , , ,  }, 
        { static Key keys_ch[KEYS] = {, , ,  }, 
        { { "1", "!|", XK_1, 1 },, , ,  }, 
        { { "2", "\"@", XK_2, 1 },, , ,  }, 
        { { "3", "*#", XK_3, 1 },, , ,  }, 
        { { "4", "ç¼", XK_4, 1 },, , ,  }, 
        { { "5", "%½", XK_5, 1 },, , ,  }, 
        { { "6", "&¬", XK_6, 1 },, , ,  }, 
        { { "7", "/|", XK_7, 1 },, , ,  }, 
        { { "8", "(¢", XK_8, 1 },, , ,  }, 
        { { "9", ")]", XK_9, 1 },, , ,  }, 
        { { "0", "=}", XK_0, 1 },, , ,  }, 
        { { "'", "?´", XK_ssharp, 1 },, , ,  }, 
        { { "^", "`~", XK_dead_acute, 1 },, , ,  }, 
        { { "⌫", 0, XK_BackSpace, 1.5 },, , ,  }, 
        { { "↹", 0, XK_Tab, 0.75 },, , ,  }, 
        { { "q", "Q@", XK_q, 1 },, , ,  }, 
        { { "w", "Wł", XK_w, 1 },, , ,  }, 
        { { "e", "E€", XK_e, 1 },, , ,  }, 
        { { "r", "R¶", XK_r, 1 },, , ,  }, 
        { { "t", "Tŧ", XK_t, 1 },, , ,  }, 
        { { "z", "Z←", XK_z, 1 },, , ,  }, 
        { { "u", "U↓", XK_u, 1 },, , ,  }, 
        { { "i", "I→", XK_i, 1 },, , ,  }, 
        { { "o", "Oœ", XK_o, 1 },, , ,  }, 
        { { "p", "Pþ", XK_p, 1 },, , ,  }, 
        { { "ü", "Ü[", 0xfc, 0.75 },, , ,  }, 
        { { "¨", "!]", 0xfe57, 0.75 },, , ,  }, 
        { { "️⮹", 0, XK_Caps_Lock, 1.75 },, , ,  }, 
        { { "a", "Aæ", XK_a, 1 },, , ,  }, 
        { { "s", "Sß", XK_s, 1 },, , ,  }, 
        { { "d", "Dð", XK_d, 1 },, , ,  }, 
        { { "f", "Fđ", XK_f, 1 },, , ,  }, 
        { { "g", "Gŋ", XK_g, 1 },, , ,  }, 
        { { "h", "Hħ", XK_h, 1 },, , ,  }, 
        { { "j", "J̣̣̉̉", XK_j, 1 },, , ,  }, 
        { { "k", "Kĸ", XK_k, 1 },, , ,  }, 
        { { "l", "Lł", XK_l, 1 },, , ,  }, 
        { { "ö", "Ö", 0xf6, 1 },, , ,  }, 
        { { "ä", "Ä{", 0xe4, 0.75 },, , ,  }, 
        { { "$", "£}", 0x24, 0.75 },, , ,  }, 
        { { "⬆", 0, XK_Shift_L, 1.75 },, , ,  }, 
        { { "<", ">\\", XK_less, 1 },, , ,  }, 
        { { "y", "Y«", XK_y, 1 },, , ,  }, 
        { { "x", "X»", XK_x, 1 },, , ,  }, 
        { { "c", "C¢", XK_c, 1 },, , ,  }, 
        { { "v", "V“", XK_v, 1 },, , ,  }, 
        { { "b", "B”", XK_b, 1 },, , ,  }, 
        { { "n", "Nn", XK_n, 1 },, , ,  }, 
        { { "m", "Mµ", XK_m, 1 },, , ,  }, 
        { { ", ",", ", XK_comma },, , ,  }, 
        { { ".", ":·", XK_period, 1 },, , ,  }, 
        { { "-", "_", XK_minus, 0.75 },, , ,  }, 
        { { "Del", 0, XK_Delete, 0.75 },, , ,  }, 
        { { "Ctrl", 0, XK_Control_L, 2 },, , ,  }, 
        { { "Win",  0, XK_Super_L, 2 },, , ,  }, 
        { { "Alt", 0, XK_Alt_L, 2 },, , ,  }, 
        { { "", 0, XK_space, 5 },, , ,  }, 
        { { "Alt Gr", 0, XK_ISO_Level3_Shift, 2 },, , ,  }, 
        { { "Menu", 0, XK_Menu, 2 },, , ,  }, 
        { { "↵", 0, XK_Return, 2 },, , ,  }, 
        { }, , ,  }, 

        { 0 }, /* New row */

        { #define LAYERS 6, , ,  }, 
        { static char* layer_names[LAYERS] = {, , ,  }, 
        { "ch",, , ,  }, 
        { }, , ,  }, 
        { , , ,  }, 
        { static Key* available_layers[LAYERS] = {, , ,  }, 
        { keys_ch,, , ,  }, 
        { }, , ,  }, 
        { , , ,  }, 

        { 0 }, /* New row */

        { ch, keys_ch, ,  }, 

        { 0 }, /* New row */


        { 0 }, /* New row */

        { , , ,  }, 
        { #define OVERLAYS 29, , ,  }, 
        { static Key overlay[OVERLAYS] = {, , ,  }, 
        { { 0, 0, XK_q }, /* New Definition */, , ,  }, 
        { { "😀", 0, 0x101f600 },, , ,  }, 
        { { "😁", 0, 0x101f601 },, , ,  }, 
        { { "😂", 0, 0x101f602 },, , ,  }, 
        { { "😃", 0, 0x101f603 },, , ,  }, 
        { { "😄", 0, 0x101f604 },, , ,  }, 
        { { "😅", 0, 0x101f605 },, , ,  }, 
        { { "😆", 0, 0x101f606 },, , ,  }, 
        { { "😇", 0, 0x101f607 },, , ,  }, 
        { { "😈", 0, 0x101f608 },, , ,  }, 
        { { "😉", 0, 0x101f609 },, , ,  }, 
        { { "😊", 0, 0x101f60a },, , ,  }, 
        { { "😋", 0, 0x101f60b },, , ,  }, 
        { { "😌", 0, 0x101f60c },, , ,  }, 
        { { "😍", 0, 0x101f60d },, , ,  }, 
        { { "😎", 0, 0x101f60e },, , ,  }, 
        { { "😏", 0, 0x101f60f },, , ,  }, 
        { { "😐", 0, 0x101f610 },, , ,  }, 
        { { "😒", 0, 0x101f612 },, , ,  }, 
        { { "😓", 0, 0x101f613 },, , ,  }, 
        { { "😛", 0, 0x101f61b },, , ,  }, 
        { { "😮", 0, 0x101f62e },, , ,  }, 
        { { "😟", 0, 0x101f61f },, , ,  }, 
        { { "😟", 0, 0x101f620 },, , ,  }, 
        { { "😢", 0, 0x101f622 },, , ,  }, 
        { { "😭", 0, 0x101f62d },, , ,  }, 
        { { "😳", 0, 0x101f633 },, , ,  }, 
        { { "😴", 0, 0x101f634 },, , ,  }, 
        { { 0, 0, XK_Cancel },  /* XK_Cancel signifies  overlay boundary */, , ,  }, 
        { }, , ,  }, 
        { , , ,  }, 

        { 0 }, /* New row */

        { #/bin/sh, , ,  }, 
        { #echo "$(ls keys*)", , ,  }, 
        { , , ,  }, 
        { for filename in $(ls -F | grep "keys_[[:alnum:]]*/$") #$(ls -d keys*), , ,  }, 
        { do, , ,  }, 
        { echo "$(echo $filename | sed 's/\///')", , ,  }, 
        { done, , ,  }, 
};
